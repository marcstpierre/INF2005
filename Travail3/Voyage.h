#ifndef VOYAGE_H
#define VOYAGE_H

#include <iostream>
#include <string>
#include "Date.h"
#include "Autobus.h"

//Un voyage se défini par un type (lié en fait un type d'autobus), un autobus, un nombre de places disponibles (là aussi déterminé par l'autobus lui meme), un lieu de départ et un lieu d'arrivé ainsi que des dates d'arrivé et
//de départ.
//Un voyage est aussi identifié par un ID pour rendre l'interface usager un peu plus simple.
namespace msp {
class Voyage
{
    public:
        Voyage();
        Voyage(int i){id = i;}
        virtual ~Voyage();

         int Getid() const {return id;}
        void Setid(const int i) {id = i; }

        Date Getdate_depart() const { return date_depart; }
        void Setdate_depart(Date val) { date_depart = val; }
        Date Getdate_arrivee() const { return date_arrivee; }
        void Setdate_arrivee(Date val) { date_arrivee = val; }
        std::string Getlieu_depart() const { return lieu_depart; }
        void Setlieu_depart(std::string val) { lieu_depart = val; }
        std::string Getlieu_arrivee() const { return lieu_arrivee; }
        void Setlieu_arrivee(std::string val) { lieu_arrivee = val; }
        Autobus Getautobus()  const { return autobus; }
        void Setautobus(Autobus);
        unsigned int Getnombreplacesdispo();
        void Reserve_places(int );
        void Setnombreplacesdispo(int );

        void print();

        static const char FUMEUR = 'F';
        static const char NON_FUMEUR = 'N';
    protected:
    private:
        int id = -1;
        Date date_depart;
        Date date_arrivee;
        std::string lieu_depart;
        std::string lieu_arrivee;
        Autobus autobus;
        unsigned int nombre_places_dispo;
};
}

#endif // VOYAGE_H
